GIT Commands
------------
Command	                                                                					Description
-------                                                                 					------------
git status	                                                           				Check status
git init	                                                           				Initialize a local Git repository
git add -A	                                                           				Add all new and changed files to the staging area
git commit -m "[commit message]"	                                   				Commit changes
git rm -r [file-name.txt]	                                           				Remove a file (or folder)



git clone ssh://git@github.com/[username]/[repository-name].git	       				Create a local copy of a remote repository
git add [file-name.txt]	                                               				Add a file to the staging area

git branch															   				List branches (the asterisk denotes the current branch)
git branch -a	                                                       				List all branches (local and remote)
git branch [branch name]	                                           				Create a new branch
git branch -d [branch name]	                                           				Delete a branch
git push origin --delete [branchName]	                               				Delete a remote branch
git checkout -b [branch name]	                                       				Create a new branch and switch to it
git checkout -b [branch name] origin/[branch name]	                   				Clone a remote branch and switch to it
git checkout [branch name]	                                           				Switch to a branch
git checkout -	                                                       				Switch to the branch last checked out
git checkout -- [file-name.txt]	                                       				Discard changes to a file
git merge [branch name]	                                              	 			Merge a branch into the active branch
git merge [source branch] [target branch]	                          	 			Merge a branch into a target branch
git stash	                                                           				Stash changes in a dirty working directory
git stash clear	                                                       				Remove all stashed entries
git push origin [branch name]	                                       				Push a branch to your remote repository
git push -u origin [branch name]	                                   				Push changes to remote repository (and remember the branch)
git push	                                                           				Push changes to remote repository (remembered branch)
git push origin --delete [branch name]	                               				Delete a remote branch
git pull	                                                           				Update local repository to the newest commit
git pull origin [branch name]	                                       				Pull changes from remote repository
git remote add origin ssh://git@github.com/[username]/[repository-name].git			Add a remote repository
git remote set-url origin ssh://git@github.com/[username]/[repository-name].git		Set a repository's origin branch to SSH
git log	                                                               				View changes
git log --summary	                                                   				View changes (detailed)
git diff [source branch] [target branch}	                           				Preview changes before merging
git difftool HEAD
git revert commit_id
git revert -n commit_id --> git commit -m 'message'
git reset --hard commit_id
git branch branch_name
git branch
git checkout branch_name
git checkout master --> git merge branch_name
git checkout branch_name --> git push -->

git 2.11 and newer

git clean  -d  -f .

older git

git clean  -d  -f ""

where -d can be replace with following:

-x means ignored files are also removed as well as files unknown to git.

-d means remove untracked directories in addition to untracked files.

-f is required to force it to run.

Linux code base in GIT HUB
--------------------------
https://github.com/torvalds/linux



git config --global user.email "you@example.com"

git config --global user.email "santoshhpgs@gmail.com"

git config --global user.name "Your Name"

git config --global user.name "Your Name"



===========================================================================================================================

git clone ssh://znshaca@gerrit.ericsson.se:29418/bscs/core

git clone ssh://zarudei@gerrit.ericsson.se:29418/bscs/core -b spec/master R17

git clone ssh://zarudei@gerrit.ericsson.se:29418/bscs/core -b ep/17.25.18-shu-x

git clone ssh://zhshaca@gerrit.ericsson.se:29418/bscs/core -b ep/17.25.18-shu-x

git checkout -b ep/17.25.18-shu-x

ep/17.25.18-shu-x 

move to bscs directory and run beow commands
--------------------------------------------

./gradlew clean
./gradlew build -x test
./gradlew cleanEclipse eclipse

./gradlew :as cleanEclipse :as eclipse

./gradlew :cps cleanEclipse :cps eclipse

Generate ssh key in your VM.

    Open git bash.

   ssh-keygen -t rsa -b 4096 -C <singnm_id>@gerrit.ericsson.se
   Key will be generated.
   
   or
   
   if you are facing any issue with the above key generated you can try this
   
   ssh-keygen -t rsa -b 4096 -C santosh.kumarachary@globallogic.com
   Key will be generated.
   
   3 files got generated after running the commands in below path
   id_rsa
   id_rsa
   
   C:\Users\acharysk\.ssh
   
   
   open the pub id_rsa file and copy the content
   
    Restart the git bash shell. Check java version. If the java version is below 8, set it to java 8. Copy 1.8.0_66 from S:\Java\JDK (x64) and 
    place it in your program files/java and update environmental variables.
	
	<if facing any issues download java 8 version and install in the VM and update the environment varibale as below>
	
   git clone ssh://znshaca@gerrit.ericsson.se:29418/bscs/core


 move to bscs directory and run beow commands
----------------------------------------------

   ./gradlew clean
   ./gradlew build -x test
  ./gradlew cleanEclipse eclipse
 
 
 git clone ssh://<Your LHS username>@gitrepo.lhs-systems.com:29418/GIT_main 
 git clone ssh://ZNSHACA@gitrepo.lhs-systems.com:29418/GIT_main 
 
 git clone ssh://znshaca@gitrepo.lhs-systems.com:29418/robot-keywords
 git clone ssh://znshaca@gerrit.ericsson.se:29418/bscs/robot-keywords
 
 mklink /J keywords C:\Data\robot-keywords\keywords
 
 
git clone ssh://znshaca@gerrit.ericsson.se:29418/bscs-tools/git-tools git-tools
git clone ssh://znshaca@gerrit.ericsson.se:29418/bscs-tools/git-tools git-tools

git config user.email santosh.kumarachary@globallogic


git commit --amend --reset-author
git commit --amend 	//updates your last commits


git checkout lhsj_main/bscs/batch/src/func/frmwk/clt/WEB-INF/jsp/func/wcs/base.jsp

git clone ssh://znshaca@gerrit.ericsson.se:29418/bscs/core

git clone ssh://zarudei@gerrit.ericsson.se:29418/bscs/core -b spec/master R17

git clone ssh://zarudei@gerrit.ericsson.se:29418/bscs/core -b ep/17.25.18-shu-x

git clone ssh://zhshaca@gerrit.ericsson.se:29418/bscs/core -b ep/17.25.18-shu-x

git checkout -b ep/17.25.18-shu-x

git checkout ep/17.25.18-shu-x

ep/17.25.18-shu-x 

git branch -d ep/17.25.18-shu-x 

git branch -D ep/17.25.18-shu-x

git branch -d ep/17.25.18-shu-x

git checkout 00431853
git checkout feature/00431853_test

git checkout -b feature/00431853_test

git checkout -b feature/00431853_test
git push -u origin feature/00431853_test
 
git add 
git commit -m "Added new automation file for COMCEL PC"
git push origin feature/00431853_test
 
git checkout master
git pull -f
git checkout feature/00431853_test
git pull -f
git merge master [To merge a different branch into your active branch:]
 
git mergetool [Run only if you have conflicts]
git commit -m "Merge conflicts resolved for patch set 2" [Run only if you have conflicts]
 
git push origin feature/00431853_test [Should run always after merge]
 
git checkout master
 
git pull -f
 
Accept PN first then raise review, If it is not a first patch set then please add change id in review command
 
git review feature/00431853_test Ic00c869afb373e9dbac527e2283f78f8da199021


git clone ssh://znshaca@roskilde.lhs-systems.com:29418/GIT_main -b main/4.x


checking